// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  jobseeker     Boolean   @default(true)  
  onboarding    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  company       Company?  
  employee      JobSeeker?
  applicant     Applicant[]
  @@map("users")
}

model JobSeeker {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")  
  photo         String
  resume        String
  achievements  String
  skills        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobseeker")
}

model Company {
  id              String    @id @default(cuid())
  userId          String    @unique @map("user_id")
  companyLogo     String
  companyName     String
  companyEmail    String
  companyAbout   String
  companyLinkedin   String
  companyWebsite  String
  companyAddress  String
  companyCountry  String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs            Job[]

  @@map("companies")
}

model Job {
  id            String    @id @default(cuid())
  title         String
  description   String
  salary        String
  location      String
  companyId     String
  status        Status 
  applicants    Applicant[]
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

enum Status{
  ACTIVE
  INACTIVE
}

model Applicant {
  id            String    @id @default(cuid())
  jobId         String
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        Boolean   @default(false) //false->pending, true->accepted
  createdAt     DateTime  @default(now()) // Track application time

  @@map("applicants")
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}